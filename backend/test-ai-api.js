const axios = require('axios');

// Configuration de base
const BASE_URL = 'http://localhost:3001/api/v1';
const TENANT_SLUG = 'demo-company';
const TEST_TOKEN = 'demo-jwt-token'; // Remplacer par un vrai token

// Helper pour les requ√™tes
const apiCall = async (method, endpoint, data = null) => {
  try {
    const config = {
      method,
      url: `${BASE_URL}/${TENANT_SLUG}/${endpoint}`,
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`,
        'Content-Type': 'application/json',
        'X-Tenant-ID': TENANT_SLUG,
        'X-User-ID': 'test-user-id',
      }
    };
    
    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur ${method} ${endpoint}:`, error.response?.data || error.message);
    return null;
  }
};

// Tests pour l'API IA
async function runAITests() {
  console.log('üß™ Tests API IA Multi-Providers - WikiPro');
  console.log('==========================================\n');

  // Test 1: Health Check
  console.log('1Ô∏è‚É£ Test Health Check...');
  const healthStatus = await apiCall('GET', 'ai/health');
  if (healthStatus) {
    console.log('‚úÖ Health Check:', healthStatus.overall);
    console.log('üìä Providers:', Object.keys(healthStatus.providers).join(', '));
  }

  // Test 2: Statut des providers
  console.log('\n2Ô∏è‚É£ Test Statut Providers...');
  const providersStatus = await apiCall('GET', 'ai/providers');
  if (providersStatus) {
    console.log('‚úÖ Providers disponibles:', providersStatus.providers.length);
    providersStatus.providers.forEach(provider => {
      console.log(`   - ${provider.name}: ${provider.available ? 'üü¢ Disponible' : 'üî¥ Indisponible'}`);
    });
  }

  // Test 3: Statistiques syst√®me
  console.log('\n3Ô∏è‚É£ Test Statistiques...');
  const stats = await apiCall('GET', 'ai/stats');
  if (stats) {
    console.log('‚úÖ Stats syst√®me:');
    console.log(`   - Providers: ${stats.providers.available}/${stats.providers.total}`);
    console.log(`   - Quotas tenants: ${stats.quotas.totalTenants}`);
    console.log(`   - Connexions WS: ${stats.streaming.activeConnections || 0}`);
  }

  // Test 4: Chat simple (devrait probablement √©chouer sans vraies cl√©s API)
  console.log('\n4Ô∏è‚É£ Test Chat Simple...');
  const chatRequest = {
    messages: [
      { role: 'user', content: 'Bonjour, peux-tu me dire combien font 2+2?' }
    ],
    temperature: 0.7,
    maxTokens: 50
  };

  const chatResponse = await apiCall('POST', 'ai/chat', chatRequest);
  if (chatResponse) {
    console.log('‚úÖ R√©ponse IA re√ßue:');
    console.log(`   - Provider: ${chatResponse.provider}`);
    console.log(`   - Tokens: ${chatResponse.tokensUsed}`);
    console.log(`   - Dur√©e: ${chatResponse.duration}ms`);
    console.log(`   - R√©ponse: "${chatResponse.message.content.substring(0, 100)}..."`);
  } else {
    console.log('‚ö†Ô∏è Chat √©chou√© (normal sans cl√©s API configur√©es)');
  }

  // Test 5: Chat avec provider sp√©cifique
  console.log('\n5Ô∏è‚É£ Test Chat avec Provider Pr√©f√©r√©...');
  const chatWithProviderRequest = {
    ...chatRequest,
    messages: [
      { role: 'user', content: 'Test avec provider sp√©cifique' }
    ]
  };

  const chatWithProvider = await apiCall('POST', 'ai/chat', chatWithProviderRequest, {
    'X-Preferred-Provider': 'openai'
  });

  if (chatWithProvider) {
    console.log('‚úÖ Chat avec provider pr√©f√©r√© r√©ussi');
  } else {
    console.log('‚ö†Ô∏è Chat avec provider pr√©f√©r√© √©chou√©');
  }

  // Test 6: Validation des donn√©es d'entr√©e
  console.log('\n6Ô∏è‚É£ Test Validation...');
  const invalidRequest = {
    messages: [], // Messages vides - devrait √™tre rejet√©
    temperature: 3.0, // Temp√©rature invalide
  };

  const validationResponse = await apiCall('POST', 'ai/chat', invalidRequest);
  if (!validationResponse) {
    console.log('‚úÖ Validation fonctionne (requ√™te invalide rejet√©e)');
  } else {
    console.log('‚ùå Probl√®me de validation');
  }

  console.log('\n==========================================');
  console.log('üèÅ Tests termin√©s');
  
  // R√©sum√© des fonctionnalit√©s test√©es
  console.log('\nüìã Fonctionnalit√©s test√©es:');
  console.log('   ‚úì Health check des providers IA');
  console.log('   ‚úì R√©cup√©ration du statut des providers');  
  console.log('   ‚úì Statistiques syst√®me globales');
  console.log('   ‚úì API Chat synchrone');
  console.log('   ‚úì S√©lection de provider pr√©f√©r√©');
  console.log('   ‚úì Validation des donn√©es d\'entr√©e');
  
  console.log('\n‚ö° Pour tester le streaming WebSocket:');
  console.log('   - Connectez-vous √† ws://localhost:3001/ai/stream');
  console.log('   - Envoyez un √©v√©nement "chat.stream.start"');
  
  console.log('\nüîë Pour tester avec de vraies r√©ponses IA:');
  console.log('   - Configurez les variables d\'environnement:');
  console.log('     ‚Ä¢ AI_OPENAI_API_KEY=sk-...');
  console.log('     ‚Ä¢ AI_ANTHROPIC_API_KEY=sk-ant-...');
  console.log('     ‚Ä¢ AI_GEMINI_API_KEY=...');
}

// Ex√©cuter les tests
if (require.main === module) {
  runAITests().catch(console.error);
}

module.exports = { runAITests, apiCall };