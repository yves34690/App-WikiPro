import { NestFactory } from '@nestjs/core';
import { Repository } from 'typeorm';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Logger } from '@nestjs/common';

import { AppModule } from '../../../app.module';
import { Session, AIProvider } from '../entities/session.entity';
import { Conversation } from '../entities/conversation.entity';
import { User, UserRole, UserStatus } from '@core/entities/user.entity';
import { Tenant } from '@core/entities/tenant.entity';

interface TestDataConfig {
  tenantsCount: number;
  usersPerTenant: number;
  sessionsPerUser: number;
  conversationsPerSession: number;
}

/**
 * Script pour cr√©er des donn√©es de test volumineuses
 * Usage: npm run test-data:create
 */
async function createTestData(config: TestDataConfig = {
  tenantsCount: 3,
  usersPerTenant: 2,
  sessionsPerUser: 5,
  conversationsPerSession: 8,
}) {
  const logger = new Logger('CreateTestData');
  
  logger.log('üöÄ D√©but cr√©ation des donn√©es de test pour sessions IA');
  logger.log(`Configuration: ${JSON.stringify(config, null, 2)}`);

  const app = await NestFactory.createApplicationContext(AppModule);
  
  // Obtenir les repositories
  const tenantRepository = app.get<Repository<Tenant>>(getRepositoryToken(Tenant));
  const userRepository = app.get<Repository<User>>(getRepositoryToken(User));
  const sessionRepository = app.get<Repository<Session>>(getRepositoryToken(Session));
  const conversationRepository = app.get<Repository<Conversation>>(getRepositoryToken(Conversation));

  try {
    // 1. Nettoyer les donn√©es existantes
    logger.log('üßπ Nettoyage des donn√©es existantes...');
    await conversationRepository.delete({});
    await sessionRepository.delete({});
    await userRepository.delete({});
    await tenantRepository.delete({});

    // 2. Cr√©er les tenants
    logger.log(`üè¢ Cr√©ation de ${config.tenantsCount} tenants...`);
    const tenants: Tenant[] = [];
    
    for (let i = 1; i <= config.tenantsCount; i++) {
      const tenant = tenantRepository.create({
        slug: `tenant-test-${i}`,
        name: `Tenant Test ${i}`,
        is_active: true,
        settings: {
          ai_providers: ['openai', 'anthropic', 'gemini'],
          max_sessions_per_user: 100,
          max_conversations_per_session: 1000,
        },
      });
      tenants.push(tenant);
    }
    
    const savedTenants = await tenantRepository.save(tenants);
    logger.log(`‚úÖ ${savedTenants.length} tenants cr√©√©s`);

    // 3. Cr√©er les utilisateurs
    logger.log(`üë• Cr√©ation de ${config.usersPerTenant} utilisateurs par tenant...`);
    const users: User[] = [];
    
    for (const tenant of savedTenants) {
      for (let u = 1; u <= config.usersPerTenant; u++) {
        const user = userRepository.create({
          tenant_id: tenant.id,
          email: `user${u}@${tenant.slug}.com`,
          name: `User ${u} - ${tenant.name}`,
          first_name: `User${u}`,
          last_name: tenant.name,
          password_hash: 'hashed_password_demo',
          role: u === 1 ? UserRole.ADMIN : UserRole.USER,
          status: UserStatus.ACTIVE,
          preferences: {
            ai_provider_preference: Object.values(AIProvider)[u % 3],
            theme: 'dark',
            language: 'fr',
          },
        });
        users.push(user);
      }
    }
    
    const savedUsers = await userRepository.save(users);
    logger.log(`‚úÖ ${savedUsers.length} utilisateurs cr√©√©s`);

    // 4. Cr√©er les sessions IA
    logger.log(`üß† Cr√©ation de ${config.sessionsPerUser} sessions par utilisateur...`);
    const sessions: Session[] = [];
    const sessionTitles = [
      'Analyse strat√©gique Q1 2025',
      '√âtude de march√© concurrentiel',
      'Optimisation processus m√©tier',
      'Roadmap produit IA',
      'Strat√©gie transformation digitale',
      'Audit performance syst√®me',
      'Plan marketing digital',
      'Architecture microservices',
      'Analyse des tendances secteur',
      'Projet innovation R&D',
    ];
    
    for (const user of savedUsers) {
      for (let s = 1; s <= config.sessionsPerUser; s++) {
        const providers = Object.values(AIProvider);
        const session = sessionRepository.create({
          user_id: user.id,
          title: sessionTitles[(s - 1) % sessionTitles.length] + ` #${s}`,
          provider: providers[s % providers.length],
          metadata: {
            created_by: user.id,
            tenant_id: user.tenant_id,
            priority: s <= 2 ? 'high' : s <= 4 ? 'medium' : 'low',
            category: ['analysis', 'strategy', 'optimization', 'innovation'][s % 4],
            tags: [`tag${s}`, 'test-data', `user-${user.id.slice(-4)}`],
            estimated_duration_minutes: Math.floor(Math.random() * 180) + 30,
          },
        });
        sessions.push(session);
      }
    }
    
    const savedSessions = await sessionRepository.save(sessions);
    logger.log(`‚úÖ ${savedSessions.length} sessions cr√©√©es`);

    // 5. Cr√©er les conversations
    logger.log(`üí¨ Cr√©ation de ${config.conversationsPerSession} conversations par session...`);
    const conversations: Conversation[] = [];
    
    const sampleMessages = [
      'Peux-tu analyser les tendances actuelles du march√© ?',
      'Quelles sont les meilleures pratiques dans ce domaine ?',
      'Comment optimiser notre strat√©gie concurrentielle ?',
      'Propose-moi un plan d\'action d√©taill√©',
      'Quels sont les risques √† consid√©rer ?',
      'Analyse comparative avec nos concurrents principaux',
      'Recommandations pour am√©liorer l\'efficacit√©',
      '√âvaluation de l\'impact sur nos objectifs',
      'Suggestions d\'indicateurs de performance',
      'Synth√®se des points cl√©s √† retenir',
    ];

    const sampleResponses = [
      'Bas√© sur l\'analyse des donn√©es disponibles, voici les tendances identifi√©es...',
      'Les meilleures pratiques dans ce secteur incluent...',
      'Pour optimiser votre strat√©gie concurrentielle, je recommande...',
      'Voici un plan d\'action structur√© en 5 √©tapes...',
      'Les principaux risques √† consid√©rer sont...',
      'L\'analyse comparative r√©v√®le les points suivants...',
      'Mes recommandations pour am√©liorer l\'efficacit√©...',
      'L\'impact estim√© sur vos objectifs sera...',
      'Voici les indicateurs de performance sugg√©r√©s...',
      'En synth√®se, les points cl√©s √† retenir sont...',
    ];

    for (const session of savedSessions) {
      for (let c = 1; c <= config.conversationsPerSession; c++) {
        const messageIndex = (c - 1) % sampleMessages.length;
        const hasResponse = Math.random() > 0.1; // 90% des conversations ont une r√©ponse
        
        const conversation = conversationRepository.create({
          session_id: session.id,
          message: sampleMessages[messageIndex],
          response: hasResponse ? sampleResponses[messageIndex] : null,
          provider_used: hasResponse ? session.provider : null,
          tokens_used: hasResponse ? Math.floor(Math.random() * 2000) + 100 : 0,
          processing_time_ms: hasResponse ? Math.floor(Math.random() * 4000) + 500 : 0,
          metadata: {
            conversation_number: c,
            session_provider: session.provider,
            response_quality: hasResponse ? ['excellent', 'good', 'average'][Math.floor(Math.random() * 3)] : null,
            user_satisfaction: hasResponse ? Math.floor(Math.random() * 5) + 1 : null,
            context_length: Math.floor(Math.random() * 1000) + 500,
          },
        });
        
        // Ajouter un d√©lai r√©aliste entre les conversations
        const baseTime = session.created_at.getTime();
        conversation.created_at = new Date(baseTime + (c * 5 * 60 * 1000)); // 5 min entre chaque
        
        conversations.push(conversation);
      }
    }
    
    const savedConversations = await conversationRepository.save(conversations);
    logger.log(`‚úÖ ${savedConversations.length} conversations cr√©√©es`);

    // 6. Statistiques finales
    const stats = {
      tenants: savedTenants.length,
      users: savedUsers.length,
      sessions: savedSessions.length,
      conversations: savedConversations.length,
      totalTokensUsed: savedConversations.reduce((sum, conv) => sum + (conv.tokens_used || 0), 0),
      avgProcessingTime: Math.round(
        savedConversations
          .filter(conv => conv.processing_time_ms > 0)
          .reduce((sum, conv) => sum + conv.processing_time_ms, 0) / 
        savedConversations.filter(conv => conv.processing_time_ms > 0).length
      ),
    };

    logger.log('üìä Statistiques des donn√©es cr√©√©es:');
    logger.log(`   ‚Ä¢ ${stats.tenants} tenants`);
    logger.log(`   ‚Ä¢ ${stats.users} utilisateurs`);
    logger.log(`   ‚Ä¢ ${stats.sessions} sessions IA`);
    logger.log(`   ‚Ä¢ ${stats.conversations} conversations`);
    logger.log(`   ‚Ä¢ ${stats.totalTokensUsed.toLocaleString()} tokens utilis√©s au total`);
    logger.log(`   ‚Ä¢ ${stats.avgProcessingTime}ms de temps de traitement moyen`);

    // 7. Test rapide des performances
    logger.log('‚ö° Test de performance...');
    const perfStartTime = Date.now();
    
    // Simuler une requ√™te typique
    const testTenant = savedTenants[0];
    const testUser = savedUsers.find(u => u.tenant_id === testTenant.id);
    
    await sessionRepository.query(`SET app.current_tenant_id = '${testTenant.id}'`);
    
    const userSessions = await sessionRepository.find({
      where: { user_id: testUser.id },
      take: 20,
      order: { created_at: 'DESC' },
    });
    
    const perfDuration = Date.now() - perfStartTime;
    logger.log(`   ‚Ä¢ R√©cup√©ration de ${userSessions.length} sessions en ${perfDuration}ms`);
    
    if (perfDuration < 200) {
      logger.log('‚úÖ Performance objectif < 200ms atteinte !');
    } else {
      logger.warn(`‚ö†Ô∏è  Performance ${perfDuration}ms > objectif 200ms`);
    }

    logger.log('üéâ Donn√©es de test cr√©√©es avec succ√®s !');
    
    return stats;

  } catch (error) {
    logger.error('‚ùå Erreur lors de la cr√©ation des donn√©es de test:', error);
    throw error;
  } finally {
    await app.close();
  }
}

/**
 * Script pour nettoyer les donn√©es de test
 */
async function cleanTestData() {
  const logger = new Logger('CleanTestData');
  logger.log('üßπ Nettoyage des donn√©es de test...');

  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    const tenantRepository = app.get<Repository<Tenant>>(getRepositoryToken(Tenant));
    const userRepository = app.get<Repository<User>>(getRepositoryToken(User));
    const sessionRepository = app.get<Repository<Session>>(getRepositoryToken(Session));
    const conversationRepository = app.get<Repository<Conversation>>(getRepositoryToken(Conversation));

    // Nettoyer dans l'ordre inverse des d√©pendances
    await conversationRepository.delete({});
    await sessionRepository.delete({});
    await userRepository.delete({});
    await tenantRepository.delete({});

    logger.log('‚úÖ Donn√©es de test nettoy√©es');
  } catch (error) {
    logger.error('‚ùå Erreur lors du nettoyage:', error);
    throw error;
  } finally {
    await app.close();
  }
}

/**
 * Script principal
 */
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'create':
      const config = {
        tenantsCount: parseInt(process.argv[3]) || 3,
        usersPerTenant: parseInt(process.argv[4]) || 2,
        sessionsPerUser: parseInt(process.argv[5]) || 5,
        conversationsPerSession: parseInt(process.argv[6]) || 8,
      };
      await createTestData(config);
      break;
      
    case 'clean':
      await cleanTestData();
      break;
      
    case 'create-large':
      await createTestData({
        tenantsCount: 5,
        usersPerTenant: 10,
        sessionsPerUser: 20,
        conversationsPerSession: 15,
      });
      break;
      
    default:
      console.log('Usage:');
      console.log('  npm run test-data create [tenants] [users] [sessions] [conversations]');
      console.log('  npm run test-data clean');
      console.log('  npm run test-data create-large');
      console.log('');
      console.log('Exemples:');
      console.log('  npm run test-data create');
      console.log('  npm run test-data create 3 2 5 8');
      console.log('  npm run test-data create-large');
      process.exit(1);
  }
}

if (require.main === module) {
  main().catch((error) => {
    console.error('Script failed:', error);
    process.exit(1);
  });
}

export { createTestData, cleanTestData };